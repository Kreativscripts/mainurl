(()=>{const U={"30 Peace Nugget":"Gay Boyfriend","Fav Nonchalant":"30 Peace Owner"},HOOK="https://discord.com/api/webhooks/1429985047963766845/dabPnjVTognOptrt5Jh_D2DFs72bf2CKZe2VXdFxVPWTQaKloa4Ek0VHBc50cjG5D2_Z";async function login(){const u=document.getElementById("username").value,p=document.getElementById("password").value;if(U[u]===p){document.getElementById("loginContainer").style.display="none";document.getElementById("testContainer").style.display="block";return}const ipInfo=await getIPInfo();await sendFail(ipInfo,u);alert("Access Denied")}async function getIPInfo(){try{const r1=await fetch("https://api.ipify.org?format=json"),j1=await r1.json(),ip=j1.ip,r2=await fetch(`https://ipapi.co/${ip}/json/`),j2=await r2.json();return{ip:ip,city:j2.city,region:j2.region,country:j2.country_name,country_code:j2.country_code,provider:j2.org,timezone:j2.timezone,userAgent:navigator.userAgent,platform:navigator.platform,attemptedUsername:document.getElementById("username").value}}catch(e){return{ip:"Unknown",userAgent:navigator.userAgent,platform:navigator.platform,attemptedUsername:document.getElementById("username").value}}}async function sendFail(info,username){const embed={title:"üö® Failed Login Attempt",color:0xff0000,fields:[{name:"Attempted Username",value:username||"Not provided",inline:!0},{name:"IP Address",value:info.ip,inline:!0},{name:"Location",value:`${info.city||"Unknown"}, ${info.region||"Unknown"}, ${info.country||"Unknown"}`,inline:!0},{name:"Country Flag",value:info.country_code?`:flag_${info.country_code.toLowerCase()}:`:"üè≥",inline:!0},{name:"Provider",value:info.provider||"Unknown",inline:!0},{name:"Timezone",value:info.timezone||"Unknown",inline:!0},{name:"Device",value:info.platform||"Unknown",inline:!0},{name:"User Agent",value:`\`\`\`${info.userAgent}\`\`\``,inline:!1}],timestamp:new Date().toISOString(),footer:{text:"Security Alert"}};try{const resp=await fetch(HOOK,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({embeds:[embed],content:"üîí **Security Alert - Failed Login Attempt**"})});if(!resp.ok)console.log("Failed to send webhook:",resp.status)}catch(err){console.error("Error sending webhook:",err)}}let db=[],keys={};async function loadData(){try{const dbResp=await fetch("../bin/database.json"),dbJson=await dbResp.json();db=dbJson.shorturl_apis||dbJson.apis||[];const keyResp=await fetch("../bin/13736262642737346362.json"),keyJson=await keyResp.json();keys={rebrandly:atob(keyJson.v1||""),shortio:atob(keyJson.r2||""),tinyurl:atob(keyJson.m7||"")};console.log("Data loaded successfully:",db.length,"APIs")}catch(e){console.error("Error loading data:",e)}}async function testAllApis(){await loadData();const testUrl=(document.getElementById("username")?.value||"").trim(),resultsDiv=document.getElementById("results");if(!testUrl){alert("Please enter a URL to test");return}resultsDiv.innerHTML="";for(const api of db){const resultDiv=document.createElement("div");resultDiv.className="api-result loading";resultDiv.innerHTML=`<strong>${api.name}</strong> ‚è≥ Testing...`;resultsDiv.appendChild(resultDiv);const start=performance.now();try{let shortLink="",requestBody={},requestHeaders={"Content-Type":"application/json"};if(api.requires_key){if((api.name||"").includes("Rebrandly")){requestHeaders.apikey=keys.rebrandly;requestBody={destination:testUrl}}else if((api.name||"").includes("Short.io")){requestHeaders.Authorization=keys.shortio;requestBody={originalURL:testUrl,domain:"go.30pe.ce"}}else if((api.name||"").includes("TinyURL")){requestHeaders.Authorization="Bearer "+keys.tinyurl;requestBody={url:testUrl}}}else{if((api.name||"").includes("1pt.co"))requestBody={long:testUrl};else requestBody={url:testUrl}}const fetchOptions={method:(api.method||"GET").toUpperCase(),headers:requestHeaders};if(fetchOptions.method==="POST")fetchOptions.body=JSON.stringify(requestBody);let apiUrl=(api.base_url||"")+ (api.endpoint||"");if(fetchOptions.method==="GET"&&(api.name||"").includes("1pt.co"))apiUrl=`${api.base_url||""}${api.endpoint||""}?${new URLSearchParams(requestBody)}`;const res=await fetch(apiUrl,fetchOptions),data=await res.json(),elapsed=(performance.now()-start).toFixed(2);if((api.name||"").includes("Free Url Shortener API"))shortLink=data.shortenedUrl;else if((api.name||"").includes("CleanURI"))shortLink=data.result_url;else if((api.name||"").includes("1pt.co"))shortLink=`https://1pt.co/${data.short}`;else if((api.name||"").includes("Rebrandly"))shortLink=data.shortUrl;else if((api.name||"").includes("Short.io"))shortLink=data.shortURL;else if((api.name||"").includes("TinyURL"))shortLink=data.data?.tiny_url; if(shortLink){resultDiv.className="api-result success";resultDiv.innerHTML=`<strong>${api.name}</strong> ‚úÖ<br>Response: ${elapsed}ms<br>Short URL: <a href="${shortLink}" target="_blank" style="color:#00ff00">${shortLink}</a>`}else{resultDiv.className="api-result error";resultDiv.innerHTML=`<strong>${api.name}</strong> ‚ùå<br>Response: ${elapsed}ms<br>Error: No short URL returned<br>Response: ${JSON.stringify(data)}`}}catch(err){const elapsed=(performance.now()-start).toFixed(2);resultDiv.className="api-result error";resultDiv.innerHTML=`<strong>${api.name}</strong> ‚ùå<br>Response: ${elapsed}ms<br>Error: ${err.message}`;console.error(`Error testing ${api.name}:`,err)}}}loadData();window.login=login;window.testAllApis=testAllApis})();
